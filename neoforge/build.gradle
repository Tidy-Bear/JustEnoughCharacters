plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.moddev'
}

version = "${verspec}.${verbuild}"

base {
    archivesName = mod_id + '-neoforge'
}
neoForge {
    version = neo_version

    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }

    runs {
        configureEach {
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
        client {
            client()
        }
    }

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mappings_version
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly project(':common')

    jarJar(project(':coremod-neoforge'))
    jarJar(implementation("com.github.towdium:PinIn:${verpinin}"))
    clientAdditionalRuntimeClasspath "com.github.towdium:PinIn:${verpinin}"
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-core:${jei_version}"
    compileOnly 'com.google.auto.service:auto-service-annotations:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
}

compileJava {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            loader_version_range: loader_version_range,
            mod_id              : mod_id,
            mod_version         : version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}